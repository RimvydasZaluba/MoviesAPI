// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Data.Contexts;

namespace Movies.Data.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    partial class MovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Movies.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new { Id = 1, Name = "Action" },
                        new { Id = 2, Name = "Horror" },
                        new { Id = 3, Name = "Comedy" },
                        new { Id = 4, Name = "Superhero" },
                        new { Id = 5, Name = "Thriller" },
                        new { Id = 6, Name = "Sci-fi" }
                    );
                });

            modelBuilder.Entity("Movies.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<int>("RunningTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new { Id = 1, ReleaseDate = new DateTime(2016, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 108, Title = "Deadpool" },
                        new { Id = 2, ReleaseDate = new DateTime(2003, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 97, Title = "Freddy vs Jason" },
                        new { Id = 3, ReleaseDate = new DateTime(1994, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 102, Title = "The Crow" },
                        new { Id = 4, ReleaseDate = new DateTime(1999, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 130, Title = "Dogma" },
                        new { Id = 5, ReleaseDate = new DateTime(2005, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 109, Title = "The Hitchhiker's Guide to the Galaxy" },
                        new { Id = 6, ReleaseDate = new DateTime(2012, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 110, Title = "Seven Psychopaths" },
                        new { Id = 7, ReleaseDate = new DateTime(2009, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 107, Title = "Moon" },
                        new { Id = 8, ReleaseDate = new DateTime(2002, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), RunningTime = 107, Title = "Equilibrium " }
                    );
                });

            modelBuilder.Entity("Movies.Data.Entities.MovieGenre", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("MovieId");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new { GenreId = 1, MovieId = 1 },
                        new { GenreId = 3, MovieId = 1 },
                        new { GenreId = 4, MovieId = 1 },
                        new { GenreId = 6, MovieId = 1 },
                        new { GenreId = 2, MovieId = 2 },
                        new { GenreId = 3, MovieId = 2 },
                        new { GenreId = 1, MovieId = 3 },
                        new { GenreId = 4, MovieId = 3 },
                        new { GenreId = 5, MovieId = 3 },
                        new { GenreId = 3, MovieId = 4 },
                        new { GenreId = 3, MovieId = 5 },
                        new { GenreId = 6, MovieId = 5 },
                        new { GenreId = 3, MovieId = 6 },
                        new { GenreId = 5, MovieId = 6 },
                        new { GenreId = 6, MovieId = 7 },
                        new { GenreId = 1, MovieId = 8 },
                        new { GenreId = 5, MovieId = 8 },
                        new { GenreId = 6, MovieId = 8 }
                    );
                });

            modelBuilder.Entity("Movies.Data.Entities.Rating", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("MovieId");

                    b.Property<int>("Stars");

                    b.HasKey("UserId", "MovieId");

                    b.HasAlternateKey("MovieId", "UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new { UserId = 1, MovieId = 1, Stars = 5 },
                        new { UserId = 1, MovieId = 2, Stars = 3 },
                        new { UserId = 1, MovieId = 3, Stars = 4 },
                        new { UserId = 1, MovieId = 4, Stars = 2 },
                        new { UserId = 1, MovieId = 5, Stars = 1 },
                        new { UserId = 1, MovieId = 6, Stars = 3 },
                        new { UserId = 1, MovieId = 7, Stars = 5 },
                        new { UserId = 1, MovieId = 8, Stars = 4 },
                        new { UserId = 2, MovieId = 1, Stars = 4 },
                        new { UserId = 2, MovieId = 2, Stars = 5 },
                        new { UserId = 2, MovieId = 3, Stars = 4 },
                        new { UserId = 2, MovieId = 4, Stars = 5 },
                        new { UserId = 2, MovieId = 5, Stars = 4 },
                        new { UserId = 2, MovieId = 6, Stars = 2 },
                        new { UserId = 2, MovieId = 7, Stars = 3 },
                        new { UserId = 2, MovieId = 8, Stars = 1 },
                        new { UserId = 3, MovieId = 1, Stars = 5 },
                        new { UserId = 3, MovieId = 2, Stars = 4 },
                        new { UserId = 3, MovieId = 3, Stars = 5 },
                        new { UserId = 3, MovieId = 4, Stars = 3 },
                        new { UserId = 3, MovieId = 5, Stars = 3 },
                        new { UserId = 3, MovieId = 6, Stars = 2 },
                        new { UserId = 3, MovieId = 7, Stars = 1 },
                        new { UserId = 3, MovieId = 8, Stars = 4 }
                    );
                });

            modelBuilder.Entity("Movies.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirtName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, FirtName = "John", LastName = "Smith" },
                        new { Id = 2, FirtName = "Jane", LastName = "Doe" },
                        new { Id = 3, FirtName = "Tester", LastName = "McTesteson" }
                    );
                });

            modelBuilder.Entity("Movies.Data.Entities.MovieGenre", b =>
                {
                    b.HasOne("Movies.Data.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Data.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movies.Data.Entities.Rating", b =>
                {
                    b.HasOne("Movies.Data.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movies.Data.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
